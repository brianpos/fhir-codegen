@page "/diff"

@using FhirCodeGenBlazor.Models;
@using FhirCodeGenBlazor.Services;
@using Microsoft.Health.Fhir.CodeGenCommon.Models;
@using Microsoft.Health.Fhir.SpecManager.Manager
@inject NavigationManager NavigationManager
@inject ISpecManagerWebService SpecService
@inject IPackageDiffWebService DiffService
@implements IDisposable

<PageTitle>FHIR Diff Tool</PageTitle>

<p><em>Compare packages loaded from the cache</em></p>

<div class="input-group mb-2">
    <label class="input-group-text" for="selectPackageA">Package A</label>
    <select id="selectPackageA" class="form-select" aria-label="Package A" @bind="directiveA">
        @foreach((string key, FhirVersionInfo info) in SpecService.OrderBy((kvp) => kvp.Key))
        {
            <option value="@key">@info.PackageName # @info.VersionString</option>
        }
    </select>
</div>

<div class="input-group mb-2">
    <label class="input-group-text" for="selectArtifactA">(Optional) Artifact A</label>
    <select id="selectArtifactA" class="form-select" aria-label="Artifact A" @bind="artifactA" disabled="@IsDisabledArtifactA()" >
        @if (!string.IsNullOrEmpty(directiveA))
        {
            <option value="">(Compare all package contents)</option>
            @foreach((FhirArtifactClassEnum ac, List<FhirArtifactRecord> artifacts) in SpecService[directiveA].ArtifactRecordsByClass)
            {
                foreach (FhirArtifactRecord artifact in artifacts)
                {
                    <option value="@artifact.Url">@ac - @artifact.Id</option>
                }
            }
        }
    </select>
</div>

<div class="input-group mb-2">
    <label class="input-group-text" for="selectPackageB">Package B</label>
    <select id="selectPackageA" class="form-select" aria-label="Package B" @bind="directiveB">
        @foreach((string key, FhirVersionInfo info) in SpecService.OrderBy((kvp) => kvp.Key))
        {
            <option value="@key">@info.PackageName # @info.VersionString</option>
        }
    </select>
</div>

<div class="input-group mb-2">
    <label class="input-group-text" for="selectArtifactB">(Optional) Artifact B</label>
    <select id="selectArtifactB" class="form-select" aria-label="Artifact B" @bind="artifactB" disabled="@IsDisabledArtifactB()" >
        @if (!string.IsNullOrEmpty(directiveB))
        {
            <option value="">(Compare all package contents)</option>
            @foreach((FhirArtifactClassEnum ac, List<FhirArtifactRecord> artifacts) in SpecService[directiveB].ArtifactRecordsByClass)
            {
                foreach (FhirArtifactRecord artifact in artifacts)
                {
                    <option value="@artifact.Url">@ac - @artifact.Id</option>
                }
            }
        }
    </select>
</div>


<p>
    <button
        type="button"
        class="btn btn-primary m-1"
        @onclick="() => RunDiff()"
        >
        Diff!
    </button>
    @if (diffInProgress)
    {
        <span class="spinner-border align-content-center"></span>
    }
</p>

<p>
@foreach((FhirArtifactClassEnum classEnum, bool visible) in showArtifactClass)
{
    <button
        type="button"
        class=@GetButtonClass(visible)
        @onclick="() => ToggleShowState(classEnum)"
        >
        @classEnum.ToString() (@results.DiffsByKeyByArtifactClass[classEnum].Count())
    </button>
}
</p>

<p>
    <button
        type="button"
        class=@GetButtonClass(_showState)
        @onclick="() => ToggleShowState()"
        >
        Toggle All
    </button>
    @foreach((DiffResults.DiffTypeEnum diffEnum, bool visible) in showDiffType.OrderBy(o => o.Key.ToString()))
    {
        <button
            type="button"
            class=@GetButtonClass(visible)
            @onclick="() => ToggleShowState(diffEnum)"
            >
            @diffEnum.ToString()
        </button>
    }
</p>

<div class="input-group">
    <span class="input-group-text" id="basic-addon1">Filter</span>
    <input
        type="text"
        placeholder="Filter"
        aria-label="Filter"
        aria-describedby="basic-addon1"
        @bind-value="artifactFilterText"
        @oninput="@((ChangeEventArgs e) => InvokeAsync(() => RebuildFilteredArtifacts(e?.Value?.ToString() ?? "")))"
        />
</div>


@foreach ((FhirArtifactClassEnum artifactClass, Dictionary<string, List<DiffResults.DiffRecord>> artifactDict) in filtered)
{
    if ((artifactDict.Count == 0) || (!showArtifactClass[artifactClass]))
    {
        continue;
    }

    <table class="table">
        <thead>
            <tr class="table-info"><td class="fw-bold">@artifactClass.ToString()s</td></tr>
        </thead>
        <tbody>
            <tr><td>
                <table class="table table-hover">
                    <tbody>
                        @foreach(string key in artifactDict.Keys.OrderBy(s => s))
                        {
                            if (artifactDict[key].Count == 0)
                            {
                                continue;
                            }

                            switch (artifactClass)
                            {
                                case FhirArtifactClassEnum.ValueSet:
                                    <tr class="table-primary"><td>@GetValueSetHeader(key)</td></tr>
                                    break;

                                default:
                                    <tr class="table-primary"><td>@key</td></tr>
                                    break;
                            }

                            <tr><td>
                                <table class="table table-striped table-hover table-bordered">
                                    <thead>
                                        <tr>
                                            <th class="col-md-2">Path</th>
                                            <th class="col-md-2">Type</th>
                                            @if (directiveA.Equals(directiveB))
                                            {
                                                <th class="col-md-2">@artifactA.Split('/').Last()</th>
                                                <th class="col-md-2">@artifactB.Split('/').Last()</th>
                                            }
                                            else if (string.IsNullOrEmpty(artifactA) || string.IsNullOrEmpty(artifactB))
                                            {
                                                <th class="col-md-2">@directiveA</th>
                                                <th class="col-md-2">@directiveB</th>
                                            }
                                            else
                                            {
                                                <th class="col-md-2">@directiveA.@artifactA</th>
                                                <th class="col-md-2">@directiveB.@artifactB</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (DiffResults.DiffRecord rec in artifactDict[key])
                                        {
                                            <tr>
                                                <td>@rec.path</td>
                                                <td>@rec.diffType.ToString()</td>
                                                <td>@rec.valueA</td>
                                                <td>@rec.valueB</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </td></tr>
                        }
                    </tbody>
                </table>
            </td></tr>
        </tbody>
    </table>
}

@code {
    private string directiveA = "";
    private string directiveB = "";

    private string artifactA = "";
    private string artifactB = "";

    /// <summary>Specifies the filter.</summary>
    private string artifactFilterText = "";

    private DiffResults results = new();

    private Dictionary<FhirArtifactClassEnum, Dictionary<string, List<DiffResults.DiffRecord>>> filtered = new();

    private Dictionary<FhirArtifactClassEnum, bool> showArtifactClass = new();
    private Dictionary<DiffResults.DiffTypeEnum, bool> showDiffType = new();

    /// <summary>True to show, false to hide the state.</summary>
    private bool _showState = true;

    private static string[] _bindingStrengthLiterals = {
        "Not bound",
        "Required",
        "Extensible",
        "Preferred",
        "Example"
    };

    /// <summary>Gets or sets a value indicating whether the difference in progress.</summary>
    private bool diffInProgress { get; set; } = false;

    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        foreach (DiffResults.DiffTypeEnum diffType in Enum.GetValues(typeof(DiffResults.DiffTypeEnum)))
        {
            showDiffType.Add(diffType, true);
        }

        NavTracker?.NotifyNav("FHIR Diff Tool", "diff", 1);
        NavigationManager.LocationChanged += HandleLocationChanged;

        DiffService.OnDiffCompleted += HandleDiffCompleted;
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
        DiffService.OnDiffCompleted -= HandleDiffCompleted;
    }

    /// <summary>Executes the difference operation.</summary>
    private void RunDiff()
    {
        if (string.IsNullOrEmpty(directiveA))
        {
            return;
        }

        if (string.IsNullOrEmpty(directiveB))
        {
            return;
        }

        if (diffInProgress)
        {
            return;
        }

        diffInProgress = true;

        //DifferOptions options = new(false, false, false, false, false, true);
        DifferOptions options = new(true, true, true, true, true, true);

        if (string.IsNullOrEmpty(artifactA) || string.IsNullOrEmpty(artifactB))
        {
            Task task = DiffService.RequestDiff(SpecService[directiveA], SpecService[directiveB], options);
            task.Start();
        }
        else
        {
            Task task = DiffService.RequestDiff(SpecService[directiveA], artifactA, SpecService[directiveB], artifactB, options);
            task.Start();
        }

    }

    /// <summary>Raises the difference completed event.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Event information to send to registered event handlers.</param>
    private void HandleDiffCompleted(object? sender, DiffCompletedEventArgs e)
    {
        diffInProgress = false;
        results = e.Results ?? new();

        RebuildFilteredArtifacts(artifactFilterText, true);

        InvokeAsync(() => StateHasChanged());
    }

    /// <summary>Rebuild filtered artifacts.</summary>
    /// <param name="appliedFilter">            (Optional) A filter specifying the applied.</param>
    /// <param name="checkShownArtifactClasses">(Optional) True to check show artifact classes.</param>
    private async void RebuildFilteredArtifacts(
        string appliedFilter = "",
        bool checkShownArtifactClasses = false)
    {
        if (checkShownArtifactClasses)
        {
            foreach ((FhirArtifactClassEnum artifactClass, Dictionary<string, List<DiffResults.DiffRecord>> artifactDict) in results.DiffsByKeyByArtifactClass)
            {
                if (!showArtifactClass.ContainsKey(artifactClass))
                {
                    showArtifactClass.Add(artifactClass, false);
                }
            }

            foreach (FhirArtifactClassEnum classEnum in showArtifactClass.Keys)
            {
                if (!results.DiffsByKeyByArtifactClass.ContainsKey(classEnum))
                {
                    showArtifactClass.Remove(classEnum);
                    continue;
                }

                if (results.DiffsByKeyByArtifactClass[classEnum].Count == 0)
                {
                    showArtifactClass[classEnum] = false;
                }
            }

            if (showArtifactClass.Count((kvp) => kvp.Value == true) == 0)
            {
                if (results.DiffsByKeyByArtifactClass.ContainsKey(FhirArtifactClassEnum.Resource) &&
                    (results.DiffsByKeyByArtifactClass[FhirArtifactClassEnum.Resource].Count > 0))
                {
                    showArtifactClass[FhirArtifactClassEnum.Resource] = true;
                }
                else if (results.DiffsByKeyByArtifactClass.ContainsKey(FhirArtifactClassEnum.Profile) &&
                    (results.DiffsByKeyByArtifactClass[FhirArtifactClassEnum.Profile].Count > 0))
                {
                    showArtifactClass[FhirArtifactClassEnum.Profile] = true;
                }
                else
                {
                    foreach (FhirArtifactClassEnum ac in showArtifactClass.Keys)
                    {
                        showArtifactClass[ac] = true;
                    }
                }
            }
        }

        artifactFilterText = appliedFilter;

        if ((results.DiffsByKeyByArtifactClass == null) || (results.DiffsByKeyByArtifactClass.Count == 0))
        {
            filtered = new();

            // manually flag state has changed in case we are in a callback / async context
            await InvokeAsync(() => StateHasChanged());

            return;
        }

        Dictionary<FhirArtifactClassEnum, Dictionary<string, List<DiffResults.DiffRecord>>> updated = new();

        foreach ((FhirArtifactClassEnum classEnum, Dictionary<string, List<DiffResults.DiffRecord>> records)
                    in results.DiffsByKeyByArtifactClass)
        {
            AppendFilteredArtifacts(classEnum, appliedFilter, ref updated, records);
        }

        //artifacts.Sort((a, b) => a.Id.CompareTo(b.Id));
        filtered = updated;

        // manually flag state has changed in case we are in a callback / async context
        await InvokeAsync(() => StateHasChanged());
    }

    /// <summary>Appends a filtered artifacts.</summary>
    /// <param name="classEnum">The class enum.</param>
    /// <param name="filter">   Specifies the filter.</param>
    /// <param name="updated">  [in,out] The updated.</param>
    /// <param name="data">     The data.</param>
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private void AppendFilteredArtifacts(
        FhirArtifactClassEnum classEnum,
        string filter,
        ref Dictionary<FhirArtifactClassEnum, Dictionary<string, List<DiffResults.DiffRecord>>> updated,
        Dictionary<string, List<DiffResults.DiffRecord>> data)
    {
        if (!showArtifactClass.Any())
        {
            return;
        }

        if (showArtifactClass[classEnum] != true)
        {
            return;
        }

        updated.Add(classEnum, new());

        if (string.IsNullOrEmpty(filter))
        {
            foreach (string key in data.Keys.OrderBy((k) => k))
            {
                updated[classEnum].Add(key, new());
                updated[classEnum][key].AddRange(data[key].Where(r => showDiffType[r.diffType]));
                updated[classEnum][key].Sort((a, b) => a.path.CompareTo(b.path));
            }
        }
        else
        {
            foreach (string key in data.Keys.OrderBy((k) => k))
            {
                if (!key.Contains(filter, StringComparison.OrdinalIgnoreCase))
                {
                    continue;
                }

                updated[classEnum].Add(key, new());
                updated[classEnum][key].AddRange(
                    data[key].Where(r =>
                        showDiffType[r.diffType] &&
                        (r.path.Contains(filter, StringComparison.OrdinalIgnoreCase)
                    )));

                if (updated[classEnum][key].Count == 0)
                {
                    updated[classEnum].Remove(key);
                }
                else
                {
                    updated[classEnum][key].Sort((a, b) => a.path.CompareTo(b.path));
                }
            }
        }
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/diff"))
        {
            NavTracker?.NotifyNav("FHIR Diff Tool", $"diff", 1);
        }
    }

    /// <summary>Toggle show state.</summary>
    /// <param name="classEnum">The class enum.</param>
    private void ToggleShowState(FhirArtifactClassEnum classEnum)
    {
        showArtifactClass[classEnum] = !showArtifactClass[classEnum];
        InvokeAsync(() => RebuildFilteredArtifacts(artifactFilterText, false));
    }

    /// <summary>Toggle show state.</summary>
    /// <param name="diffEnum">The difference enum.</param>
    private void ToggleShowState(DiffResults.DiffTypeEnum diffEnum)
    {
        showDiffType[diffEnum] = !showDiffType[diffEnum];
        InvokeAsync(() => RebuildFilteredArtifacts(artifactFilterText, false));
    }

    /// <summary>Toggle show state.</summary>
    /// <param name="state">True to state.</param>
    private void ToggleShowState()
    {
        _showState = !_showState;
        foreach (DiffResults.DiffTypeEnum diffEnum in showDiffType.Keys)
        {
            showDiffType[diffEnum] = _showState;
        }

        InvokeAsync(() => RebuildFilteredArtifacts(artifactFilterText, false));
    }

    /// <summary>Gets value set header.</summary>
    /// <param name="vsUrl">URL of the vs.</param>
    /// <returns>The value set header.</returns>
    private string GetValueSetHeader(string vsUrl)
    {
        if (string.IsNullOrEmpty(vsUrl))
        {
            return string.Empty;
        }

        string val = vsUrl;

        if ((SpecService[directiveA]?.ValueSetsByUrl.ContainsKey(vsUrl) ?? false) &&
            (SpecService[directiveA].ValueSetsByUrl[vsUrl].ValueSetsByVersion.Any()))
        {
            FhirValueSet vsA = SpecService[directiveA].ValueSetsByUrl[vsUrl].ValueSetsByVersion.First().Value;
            val += $" | {_bindingStrengthLiterals[(int)(vsA.StrongestBinding ?? 0)]} in {directiveA}";
        }

        if ((SpecService[directiveB]?.ValueSetsByUrl.ContainsKey(vsUrl) ?? false) &&
            (SpecService[directiveB].ValueSetsByUrl[vsUrl].ValueSetsByVersion.Any()))
        {
            FhirValueSet vsB = SpecService[directiveB].ValueSetsByUrl[vsUrl].ValueSetsByVersion.First().Value;
            val += $" | {_bindingStrengthLiterals[(int)(vsB.StrongestBinding ?? 0)]} in {directiveB}";
        }

        return val;
    }

    /// <summary>Gets button class.</summary>
    /// <param name="enabled">True to enable, false to disable.</param>
    /// <returns>The button class.</returns>
    private string GetButtonClass(bool enabled)
    {
        if (enabled)
        {
            return "btn btn-primary m-1";
        }

        return "btn btn-outline-primary m-1";
    }

    private bool IsDisabledArtifactA()
    {
        return string.IsNullOrEmpty(directiveA);
    }

    private bool IsDisabledArtifactB()
    {
        return string.IsNullOrEmpty(directiveB);
    }
}
